{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["LaunchItem","launch","id","name","flight_number","date_local","success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","variables","console","log","rocket","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"8PAKe,SAASA,EAAT,GAA+E,IAAD,IAAzDC,OAASC,EAAgD,EAAhDA,GAAmBC,GAA6B,EAA5CC,cAA4C,EAA7BD,MAAME,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,QAC9E,OAAO,yBAAKC,UAAU,uBAClB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,wCAAa,0BAAMA,UAAWC,IAAW,CACrC,eAAgBF,EAChB,eAAgBA,KACfH,IACL,oCAAS,kBAAC,IAAD,CAAQM,OAAO,oBAAoBJ,KAEhD,yBAAKE,UAAU,YACX,kBAAC,IAAD,CAAMG,GAAE,kBAAaR,GAAMK,UAAU,qBAArC,qBCdD,SAASI,IACpB,OACI,yBAAKJ,UAAU,QACX,2BACI,0BAAMA,UAAU,yBADpB,cAGA,2BACI,0BAAMA,UAAU,wBADpB,Y,4NCHZ,IAAMK,EAAiBC,YAAH,KAYL,SAASC,IAAY,IAAD,EACAC,YAASH,GAAlCI,EADyB,EACzBA,QAASC,EADgB,EAChBA,MAAOC,EADS,EACTA,KAExB,OAAIF,EAAgB,yCAChBC,EAAc,uCAGhB,kBAAC,WAAD,KACE,wBAAIV,UAAU,kBAAd,YACA,kBAACI,EAAD,MACCO,EAAKC,SAASC,KAAI,SAACnB,GAClB,OACE,kBAACD,EAAD,CAAYqB,IAAKpB,EAAOG,cAAeH,OAAQA,Q,+NCxBzD,IAAMqB,EAAeT,YAAH,KAYH,SAASU,EAAOC,GAAQ,IAC/BtB,EAAOsB,EAAMC,MAAMC,OAAnBxB,GAD8B,EAEHa,YAASO,EAAc,CACtDK,UAAW,CAAEzB,QADPc,EAF4B,EAE5BA,QAASC,EAFmB,EAEnBA,MAAOC,EAFY,EAEZA,KAIxB,GAAIF,EAAS,OAAO,0CAChBC,GAAOW,QAAQC,IAAIZ,GAPa,MASyBC,EAAKjB,OAApDG,GATsB,EAS5BD,KAT4B,EAStBC,eAAeE,EATO,EASPA,QATO,EASEwB,OATF,EASUzB,WAE9C,OACE,6BACE,wBAAIE,UAAU,kBACZ,0BAAMA,UAAU,aAAhB,YACCW,EAAKjB,OAAOE,MAEf,wBAAII,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAd,kBAAgDH,GAChD,wBAAIG,UAAU,mBAAd,qBACqB,IACnB,0BACEA,UAAWC,IAAW,CACpB,eAAgBF,EAChB,eAAgBA,KAGjBA,EAAU,MAAQ,QAIzB,6BACA,kBAAC,IAAD,CAAMI,GAAG,IAAIH,UAAU,qBAAvB,S,4BCzCAwB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,MAqBEC,MAlBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBN,OAAQA,GACpB,kBAAC,IAAD,KACF,yBAAKxB,UAAU,aACb,yBACE+B,IAAKC,IACLC,IAAI,SACJC,MAAO,CAAEC,MAAO,IAAKC,QAAS,QAASC,OAAQ,UAEjD,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,cAAcC,UAAWxB,QCb/ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCZN2B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLW,QAAQX,MAAMA,EAAM+C,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.aa684d7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function LaunchItem({launch: {id, flight_number, name, date_local, success}}) {\r\n    return <div className=\"card card-body mb-3\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-9\">\r\n                <h4>Mission: <span className={classNames({\r\n                    'text-success': success, \r\n                    'text-danger': !success\r\n                })}>{name}</span></h4>\r\n                <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{date_local}</Moment></p>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <Link to={`/launch/${id}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React, { Fragment } from \"react\";\r\nimport LaunchItem from \"./LaunchItem\";\r\nimport MissionKey from \"./MissionKey\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      id\r\n      flight_number\r\n      name\r\n      date_local\r\n      success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Launches() {\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4 my-3\">Launches</h1>\r\n      <MissionKey />\r\n      {data.launches.map((launch) => {\r\n        return (\r\n          <LaunchItem key={launch.flight_number} launch={launch}></LaunchItem>\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($id: String!) {\r\n    launch(id: $id) {\r\n      flight_number\r\n      name\r\n      success\r\n      date_local\r\n      rocket\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Launch(props) {\r\n  let { id } = props.match.params;\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: { id },\r\n  });\r\n\r\n  if (loading) return <h4>Loading...</h4>;\r\n  if (error) console.log(error);\r\n\r\n  const { name, flight_number, success, rocket, date_local } = data.launch;\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 my-3\">\r\n        <span className=\"text-dark\">Mission:</span>\r\n        {data.launch.name}\r\n      </h1>\r\n      <h4 className=\"mb-3\">Launch Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n        <li className=\"list-group-item\">\r\n          Launch Successful:{\" \"}\r\n          <span\r\n            className={classNames({\r\n              \"text-success\": success,\r\n              \"text-danger\": !success,\r\n            })}\r\n          >\r\n            {success ? \"Yes\" : \"No\"}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n      <hr />\r\n      <Link to=\"/\" className=\"btn btn-secondary\">\r\n        Back\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport \"./App.css\";\nimport logo from \"./logo.png\";\n\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(), \n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n        <Router>\n      <div className=\"container\">\n        <img\n          src={logo}\n          alt=\"SpaceX\"\n          style={{ width: 300, display: \"block\", margin: \"auto\" }}\n        />\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:id\" component={Launch} />\n      </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.01458c7d.png\";"],"sourceRoot":""}